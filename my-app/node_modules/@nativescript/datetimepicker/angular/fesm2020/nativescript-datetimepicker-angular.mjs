import * as i0 from '@angular/core';
import { Directive, forwardRef, NgModule } from '@angular/core';
import { BaseValueAccessor, registerElement } from '@nativescript/angular';
import { DatePickerField, TimePickerField, DateTimePickerFields } from '@nativescript/datetimepicker';
import { NG_VALUE_ACCESSOR } from '@angular/forms';

class DatePickerFieldDirective {
}
DatePickerFieldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DatePickerFieldDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
DatePickerFieldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: DatePickerFieldDirective, selector: "DatePickerField", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DatePickerFieldDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "DatePickerField"
                }]
        }] });
class TimePickerFieldDirective {
}
TimePickerFieldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: TimePickerFieldDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TimePickerFieldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: TimePickerFieldDirective, selector: "TimePickerField", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: TimePickerFieldDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "TimePickerField"
                }]
        }] });
class DateTimePickerFieldsDirective {
}
DateTimePickerFieldsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DateTimePickerFieldsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
DateTimePickerFieldsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: DateTimePickerFieldsDirective, selector: "DateTimePickerFields", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DateTimePickerFieldsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "DateTimePickerFields"
                }]
        }] });

const DATE_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DatePickerValueAccessor),
    multi: true,
};
const TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => TimePickerValueAccessor),
    multi: true,
};
const DATE_TIME_PICKERS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => DateTimePickersValueAccessor),
    multi: true,
};
/**
 * The accessor for setting a date and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <DatePickerField [(ngModel)]="model.test">
 *  ```
 */
class DatePickerValueAccessor extends BaseValueAccessor {
    constructor(elementRef) {
        super(elementRef.nativeElement);
        this._hasBeenOpened = false;
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.view.date = normalized;
    }
    handleDateChange(args) {
        if (this._hasBeenOpened) {
            this.onChange(args.value);
        }
    }
    handleDatePickerOpened(args) {
        this._hasBeenOpened = true;
    }
    handleDatePickerClosed(args) {
        this.onTouched();
    }
}
DatePickerValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DatePickerValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
DatePickerValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: DatePickerValueAccessor, selector: "DatePickerField[ngModel],DatePickerField[formControlName],DatePickerField[formControl],datepickerfield[ngModel],datepickerfield[formControlName],datepickerfield[formControl],datePickerField[ngModel],datePickerField[formControlName],datePickerField[formControl],date-picker-field[ngModel],date-picker-field[formControlName],date-picker-field[formControl]", host: { listeners: { "dateChange": "handleDateChange($event)", "datePickerOpened": "handleDatePickerOpened($event)", "datePickerClosed": "handleDatePickerClosed($event)" } }, providers: [DATE_PICKER_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DatePickerValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: "DatePickerField[ngModel],DatePickerField[formControlName],DatePickerField[formControl]," +
                        "datepickerfield[ngModel],datepickerfield[formControlName],datepickerfield[formControl]," +
                        "datePickerField[ngModel],datePickerField[formControlName],datePickerField[formControl]," +
                        "date-picker-field[ngModel],date-picker-field[formControlName],date-picker-field[formControl]",
                    providers: [DATE_PICKER_VALUE_ACCESSOR],
                    host: {
                        "(dateChange)": "handleDateChange($event)",
                        "(datePickerOpened)": "handleDatePickerOpened($event)",
                        "(datePickerClosed)": "handleDatePickerClosed($event)"
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
/**
 * The accessor for setting a time and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <TimePickerField [(ngModel)]="model.test">
 *  ```
 */
class TimePickerValueAccessor extends BaseValueAccessor {
    constructor(elementRef) {
        super(elementRef.nativeElement);
        this._hasBeenOpened = false;
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.view.time = normalized;
    }
    handleTimeChange(args) {
        if (this._hasBeenOpened) {
            this.onChange(args.value);
        }
    }
    handleTimePickerOpened(args) {
        this._hasBeenOpened = true;
    }
    handleTimePickerClosed(args) {
        this.onTouched();
    }
}
TimePickerValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: TimePickerValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TimePickerValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: TimePickerValueAccessor, selector: "TimePickerField[ngModel],TimePickerField[formControlName],TimePickerField[formControl],timepickerfield[ngModel],timepickerfield[formControlName],timepickerfield[formControl],timePickerField[ngModel],timePickerField[formControlName],timePickerField[formControl],time-picker-field[ngModel],time-picker-field[formControlName],time-picker-field[formControl]", host: { listeners: { "timeChange": "handleTimeChange($event)", "timePickerOpened": "handleTimePickerOpened($event)", "timePickerClosed": "handleTimePickerClosed($event)" } }, providers: [TIME_PICKER_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: TimePickerValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: "TimePickerField[ngModel],TimePickerField[formControlName],TimePickerField[formControl]," +
                        "timepickerfield[ngModel],timepickerfield[formControlName],timepickerfield[formControl]," +
                        "timePickerField[ngModel],timePickerField[formControlName],timePickerField[formControl]," +
                        "time-picker-field[ngModel],time-picker-field[formControlName],time-picker-field[formControl]",
                    providers: [TIME_PICKER_VALUE_ACCESSOR],
                    host: {
                        "(timeChange)": "handleTimeChange($event)",
                        "(timePickerOpened)": "handleTimePickerOpened($event)",
                        "(timePickerClosed)": "handleTimePickerClosed($event)"
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
/**
 * The accessor for setting a date and listening to changes that is used by the
 * {@link NgModel} directives.
 *
 *  ### Example
 *  ```
 *  <DateTimePickerFields [(ngModel)]="model.test">
 *  ```
 */
class DateTimePickersValueAccessor extends BaseValueAccessor {
    constructor(elementRef) {
        super(elementRef.nativeElement);
        this._hasBeenOpened = false;
    }
    writeValue(value) {
        const normalized = super.normalizeValue(value);
        this.view.date = normalized;
    }
    handleDateChange(args) {
        if (this._hasBeenOpened) {
            this.onChange(args.value);
        }
    }
    handlePickerOpened(args) {
        this._hasBeenOpened = true;
    }
    handlePickerClosed(args) {
        this.onTouched();
    }
}
DateTimePickersValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DateTimePickersValueAccessor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
DateTimePickersValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.4", type: DateTimePickersValueAccessor, selector: "DateTimePickerFields[ngModel],DateTimePickerFields[formControlName],DateTimePickerFields[formControl],datetimepickerfields[ngModel],datetimepickerfields[formControlName],datetimepickerfields[formControl],dateTimePickerFields[ngModel],dateTimePickerFields[formControlName],dateTimePickerFields[formControl],date-time-picker-fields[ngModel],date-time-picker-fields[formControlName],date-time-picker-fields[formControl]", host: { listeners: { "dateChange": "handleDateChange($event)", "datePickerOpened": "handlePickerOpened($event)", "datePickerClosed": "handlePickerClosed($event)", "timePickerOpened": "handlePickerOpened($event)", "timePickerClosed": "handlePickerClosed($event)" } }, providers: [DATE_TIME_PICKERS_VALUE_ACCESSOR], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: DateTimePickersValueAccessor, decorators: [{
            type: Directive,
            args: [{
                    selector: "DateTimePickerFields[ngModel],DateTimePickerFields[formControlName],DateTimePickerFields[formControl]," +
                        "datetimepickerfields[ngModel],datetimepickerfields[formControlName],datetimepickerfields[formControl]," +
                        "dateTimePickerFields[ngModel],dateTimePickerFields[formControlName],dateTimePickerFields[formControl]," +
                        "date-time-picker-fields[ngModel],date-time-picker-fields[formControlName],date-time-picker-fields[formControl]",
                    providers: [DATE_TIME_PICKERS_VALUE_ACCESSOR],
                    host: {
                        "(dateChange)": "handleDateChange($event)",
                        "(datePickerOpened)": "handlePickerOpened($event)",
                        "(datePickerClosed)": "handlePickerClosed($event)",
                        "(timePickerOpened)": "handlePickerOpened($event)",
                        "(timePickerClosed)": "handlePickerClosed($event)"
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

class NativeScriptDateTimePickerModule {
}
NativeScriptDateTimePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NativeScriptDateTimePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptDateTimePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.2.4", ngImport: i0, type: NativeScriptDateTimePickerModule, declarations: [DatePickerFieldDirective,
        TimePickerFieldDirective,
        DateTimePickerFieldsDirective,
        DatePickerValueAccessor,
        TimePickerValueAccessor,
        DateTimePickersValueAccessor], exports: [DatePickerFieldDirective,
        TimePickerFieldDirective,
        DateTimePickerFieldsDirective,
        DatePickerValueAccessor,
        TimePickerValueAccessor,
        DateTimePickersValueAccessor] });
NativeScriptDateTimePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NativeScriptDateTimePickerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.4", ngImport: i0, type: NativeScriptDateTimePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        DatePickerFieldDirective,
                        TimePickerFieldDirective,
                        DateTimePickerFieldsDirective,
                        DatePickerValueAccessor,
                        TimePickerValueAccessor,
                        DateTimePickersValueAccessor,
                    ],
                    exports: [
                        DatePickerFieldDirective,
                        TimePickerFieldDirective,
                        DateTimePickerFieldsDirective,
                        DatePickerValueAccessor,
                        TimePickerValueAccessor,
                        DateTimePickersValueAccessor,
                    ],
                }]
        }] });
registerElement("DatePickerField", () => DatePickerField);
registerElement("TimePickerField", () => TimePickerField);
registerElement("DateTimePickerFields", () => DateTimePickerFields);

/**
 * Generated bundle index. Do not edit.
 */

export { DatePickerFieldDirective, DatePickerValueAccessor, DateTimePickerFieldsDirective, DateTimePickersValueAccessor, NativeScriptDateTimePickerModule, TimePickerFieldDirective, TimePickerValueAccessor };
//# sourceMappingURL=nativescript-datetimepicker-angular.mjs.map
